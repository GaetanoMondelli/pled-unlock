/**
 * Event Types for Event Sourcing Architecture
 *
 * External Events: Non-deterministic inputs from outside sources
 * Internal Events: Deterministically generated from processing external events
 */

export enum EventSource {
  EXTERNAL = 'EXTERNAL',  // User input, API calls, webhooks, timers
  INTERNAL = 'INTERNAL'   // Generated by nodes processing other events
}

export interface BaseEvent {
  id: string;
  timestamp: number;
  source: EventSource;
  nodeId: string;
  type: string;
  sequence: number;
}

export interface ExternalEvent extends BaseEvent {
  source: EventSource.EXTERNAL;
  origin: 'USER' | 'API' | 'WEBHOOK' | 'TIMER' | 'SYSTEM';
  originalPayload?: any;  // Raw external data before normalization
}

export interface InternalEvent extends BaseEvent {
  source: EventSource.INTERNAL;
  parentEventIds: string[];  // Events that caused this event
  deterministicHash?: string;  // Hash to verify deterministic generation
}

export type SystemEvent = ExternalEvent | InternalEvent;

// Enhanced activity log entry with event sourcing
export interface EventSourcedActivity {
  sequence: number;
  timestamp: number;
  nodeId: string;
  nodeName?: string;
  action: string;
  value?: any;
  details?: string;
  sourceTokenIds?: string[];
  eventType: EventSource;
  eventId: string;
  parentEventIds?: string[];  // For internal events
  externalOrigin?: string;    // For external events
}

// Execution document with event sourcing
export interface EventSourcedExecution {
  id: string;
  templateId: string;
  name: string;
  description?: string;

  // Event streams
  externalEvents: ExternalEvent[];     // All external inputs
  internalEvents: InternalEvent[];     // All generated events
  eventSequence: string[];              // Ordered event IDs for replay

  // State snapshots
  nodeStates: Record<string, any>;
  currentTime: number;
  eventCounter: number;

  // Activity logs with event sourcing
  globalActivityLog: EventSourcedActivity[];
  nodeActivityLogs: Record<string, EventSourcedActivity[]>;

  // Metadata
  isCompleted: boolean;
  createdAt: string;
  updatedAt: string;
  completedAt?: string;

  // Replay information
  replayable: boolean;
  deterministicChecksum?: string;  // Checksum of all internal events for verification
}